{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\754638\\\\Desktop\\\\QR_Code_Scanner\\\\qr-code\\\\src\\\\Component\\\\Dashboard\\\\SModal\\\\Modal\\\\ReactScannarA.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport QrReader from 'react-qr-scanner';\nimport Button from '@material-ui/core/Button';\nimport Axios from 'axios';\nimport { Form } from 'react-bootstrap';\nimport Grid from '@material-ui/core/Grid';\nimport { makeStyles } from '@material-ui/core/styles';\nconst useStyles = makeStyles(theme => ({\n  rootBtn: {\n    '& > *': {\n      margin: theme.spacing(0.1)\n    },\n    display: 'flex'\n  }\n}));\n\nfunction ReactScannarA(props) {\n  _s();\n\n  const [result, setResult] = useState('No result');\n  const [values, setValues] = useState('1');\n  const [delay, setDelay] = useState(4000); //const GID = props.Usergid\n\n  const classes = useStyles();\n\n  const UpdatStore = e => {\n    Axios.put('http://localhost:3001/api/updateStoreWithdraw', {\n      result: result,\n      values: values\n    }).then(() => {\n      console.log('withdraw');\n    }).then(() => {\n      setResult('Withdraw OK!'); //console.log(result)\n    }).then(window.location.reload(false));\n    Axios.post('http://localhost:3001/api/historyWithdraw', {\n      result: result,\n      values: values,\n      GID: props.Usergid\n    }).then(() => {\n      console.log('History Add');\n    });\n  };\n\n  function IsScann() {\n    const pushResult = [''];\n\n    if (result != null && result !== undefined && result !== '') {\n      //console.log()\n      //console.log(pushResult)\n      //setDelay(8000)\n      pushResult.push(result);\n      console.log(pushResult[1]); //console.log(result)\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        item: 12,\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: [\"PART CODE : \", pushResult[1]]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.rootBtn,\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: 4,\n            children: /*#__PURE__*/_jsxDEV(Form, {\n              children: /*#__PURE__*/_jsxDEV(Form.Group, {\n                children: /*#__PURE__*/_jsxDEV(Form.Control, {\n                  type: \"number\",\n                  size: \"md\",\n                  placeholder: \"Values\",\n                  onChange: e => setValues(e.target.value)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 62,\n                  columnNumber: 29\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 61,\n                columnNumber: 25\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 60,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: 4,\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"contained\",\n              color: \"Primary\",\n              onClick: UpdatStore,\n              children: \" Withdraw \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }, this);\n  } // const Found = () => {\n  //   return (\n  //       <div>\n  //         <div>\n  //           {result}\n  //         </div>\n  //       </div>\n  //   )\n  // }\n  // const NotFound = () => {\n  //   return (\n  //       <div>\n  //         <div>\n  //           Not Found PartCode!\n  //         </div>\n  //       </div>\n  //   )\n  // }\n  // if (result != null ) {\n  // return <> {Found()} </>\n  // } else {\n  // return <> {NotFound()} </>\n  // }\n  // const NotFounf = () => {\n  // }\n  // const Hold = false\n  // if(result != null ){ \n  //   const TrueResult = result\n  //   //console.log(TrueResult)\n  //   return <p>PART CODE : {Hold?(<>A</>):(<>B</>)} </p>\n  // } else { \n  // }\n  //     // if(result === null){\n  //     //   console.log(result)\n  //     //   return <p>PART CODE :  No Finding</p>\n  //     // } else {\n  //     //   const TrueResult = result\n  //     //   //console.log(TrueResult)\n  //     //   return <p>PART CODE : {TrueResult} {Found()} </p>\n  //     // }\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(QrReader, {\n      delay: delay,\n      onError: err => console.log(err),\n      onScan: data => setResult(data),\n      style: {\n        width: '100%',\n        height: '200px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      styles: {\n        display: 'flex'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\" \", IsScann(result), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ReactScannarA, \"q4s5+naR4pBL+CvgVjyeIv+j9Jo=\", false, function () {\n  return [useStyles];\n});\n\n_c = ReactScannarA;\nexport default ReactScannarA;\n/**\r\n * \r\n * \r\n * \r\n * \r\n * \r\n    function IsScann () {\r\n      //result != T => On =>\r\n      const Found = () => {\r\n        return (\r\n        <div>\r\n          <Grid item={12}>\r\n            <div className={classes.rootBtn}>\r\n                <Grid item={4}>\r\n                    <Form > \r\n                        <Form.Group>\r\n                            <Form.Control type=\"number\" size=\"md\" placeholder=\"Values\" onChange={(e) => setValues(e.target.value)}/>\r\n                        </Form.Group>\r\n                    </Form>\r\n                </Grid>\r\n                <Grid item={4}>\r\n                    <Button  variant=\"contained\" color=\"Primary\" onClick={UpdatStore}> Withdraw </Button>\r\n                </Grid>\r\n            </div>\r\n          </Grid>\r\n        </div>\r\n      )}\r\n * \r\n * \r\n * const IsScann = () => {\r\n      const On = true\r\n      const Found = () => {\r\n        return (\r\n            <div>\r\n              <div>\r\n                {On? (<>{result}</>) : (<>B</>)}\r\n              </div>\r\n            </div>\r\n        )\r\n      }\r\n      if (result != null) {\r\n      return <> {Found()} </>\r\n      } else {\r\n      return <> {Found()} </>\r\n      }\r\n    }\r\n    \r\n///////////////////////////////////////////////////////////////\r\nconst IsScann = () => {\r\n      const On = true\r\n      const Found = () => {\r\n        return (\r\n            <div>\r\n              <div>\r\n                {result}\r\n              </div>\r\n            </div>\r\n        )\r\n      }\r\n      const NotFound = () => {\r\n        return (\r\n            <div>\r\n              <div>\r\n                Not Found PartCode!\r\n              </div>\r\n            </div>\r\n        )\r\n      }\r\n      if (result != null) {\r\n      return <> {Found()} </>\r\n      } else {\r\n      return <> {NotFound()} </>\r\n      }\r\n    }\r\n\r\n       // last values\r\n        return (\r\n            <div>\r\n              <p>\r\n                {pushResult}\r\n              </p>\r\n            </div>\r\n        )\r\n      }\r\n      const pushResult = []\r\n      if(result !== null) {\r\n        pushResult.push(result)\r\n      return <>{Found(pushResult)}</>\r\n      }\r\n\r\n */\n\nvar _c;\n\n$RefreshReg$(_c, \"ReactScannarA\");","map":{"version":3,"sources":["C:/Users/754638/Desktop/QR_Code_Scanner/qr-code/src/Component/Dashboard/SModal/Modal/ReactScannarA.js"],"names":["React","useState","QrReader","Button","Axios","Form","Grid","makeStyles","useStyles","theme","rootBtn","margin","spacing","display","ReactScannarA","props","result","setResult","values","setValues","delay","setDelay","classes","UpdatStore","e","put","then","console","log","window","location","reload","post","GID","Usergid","IsScann","pushResult","undefined","push","target","value","err","data","width","height"],"mappings":"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;AAkBA,GAvDsB,CAwDxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAOF,sBACI;AAAA,4BACI,QAAC,QAAD;AACI,MAAA,KAAK,EAAEH,KADX;AAEI,MAAA,OAAO,EAAEqB,GAAG,IAAId,OAAO,CAACC,GAAR,CAAYa,GAAZ,CAFpB;AAGI,MAAA,MAAM,EAAGC,IAAD,IAAUzB,SAAS,CAACyB,IAAD,CAH/B;AAII,MAAA,KAAK,EAAE;AAAEC,QAAAA,KAAK,EAAE,MAAT;AAAiBC,QAAAA,MAAM,EAAE;AAAzB;AAJX;AAAA;AAAA;AAAA;AAAA,YADJ,eAMI;AAAK,MAAA,MAAM,EAAE;AAAC/B,QAAAA,OAAO,EAAE;AAAV,OAAb;AAAA,6BACI;AAAA,wBAAKsB,OAAO,CAACnB,MAAD,CAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YANJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAYH;;GAzHQF,a;UAKWN,S;;;KALXM,a;AA2HT,eAAeA,aAAf;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React , { useState } from 'react'\r\nimport QrReader from 'react-qr-scanner'\r\nimport Button from '@material-ui/core/Button';\r\nimport Axios from 'axios'\r\nimport { Form } from 'react-bootstrap';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    rootBtn: {\r\n      '& > *': {\r\n        margin: theme.spacing(0.1),\r\n      },display: 'flex'\r\n    },\r\n  }));\r\n  \r\nfunction ReactScannarA(props) {\r\n    const [result, setResult] = useState('No result')\r\n    const [values, setValues] = useState('1')\r\n    const [delay, setDelay] = useState(4000)\r\n    //const GID = props.Usergid\r\n    const classes = useStyles();\r\n\r\n    const UpdatStore = (e) => {\r\n        Axios.put('http://localhost:3001/api/updateStoreWithdraw', {\r\n          result: result,\r\n          values: values,\r\n        }).then(() => {\r\n          console.log('withdraw')\r\n        }).then(() => {\r\n          setResult('Withdraw OK!')\r\n          //console.log(result)\r\n        }).then(window.location.reload(false))\r\n\r\n        Axios.post('http://localhost:3001/api/historyWithdraw', {\r\n          result: result,\r\n          values: values,\r\n          GID: props.Usergid,\r\n        }).then(() => {\r\n          console.log('History Add')\r\n        })\r\n    }\r\n\r\n    function IsScann () {\r\n      const pushResult = [''] \r\n      if  ( result != null && result !== undefined && result !== ''){\r\n        //console.log()\r\n        //console.log(pushResult)\r\n        //setDelay(8000)\r\n        pushResult.push(result)\r\n        console.log(pushResult[1])\r\n        //console.log(result)\r\n      }\r\n        return (\r\n        <div>\r\n          <Grid item={12}>\r\n            <h4>PART CODE : {pushResult[1]}</h4>\r\n            <div className={classes.rootBtn}>\r\n                <Grid item={4}>\r\n                    <Form > \r\n                        <Form.Group>\r\n                            <Form.Control type=\"number\" size=\"md\" placeholder=\"Values\" onChange={(e) => setValues(e.target.value)}/>\r\n                        </Form.Group>\r\n                    </Form>\r\n                </Grid>\r\n                <Grid item={4}>\r\n                    <Button  variant=\"contained\" color=\"Primary\" onClick={UpdatStore}> Withdraw </Button>\r\n                </Grid>\r\n            </div>\r\n          </Grid>\r\n        </div>\r\n      )}\r\n      // const Found = () => {\r\n      //   return (\r\n      //       <div>\r\n      //         <div>\r\n      //           {result}\r\n      //         </div>\r\n      //       </div>\r\n      //   )\r\n      // }\r\n      // const NotFound = () => {\r\n      //   return (\r\n      //       <div>\r\n      //         <div>\r\n      //           Not Found PartCode!\r\n      //         </div>\r\n      //       </div>\r\n      //   )\r\n      // }\r\n      // if (result != null ) {\r\n      // return <> {Found()} </>\r\n      // } else {\r\n      // return <> {NotFound()} </>\r\n      // }\r\n    \r\n\r\n\r\n      // const NotFounf = () => {\r\n\r\n      // }\r\n      // const Hold = false\r\n\r\n      // if(result != null ){ \r\n      //   const TrueResult = result\r\n      //   //console.log(TrueResult)\r\n      //   return <p>PART CODE : {Hold?(<>A</>):(<>B</>)} </p>\r\n        \r\n      // } else { \r\n        \r\n      // }\r\n      //     // if(result === null){\r\n      //     //   console.log(result)\r\n      //     //   return <p>PART CODE :  No Finding</p>\r\n      //     // } else {\r\n      //     //   const TrueResult = result\r\n      //     //   //console.log(TrueResult)\r\n      //     //   return <p>PART CODE : {TrueResult} {Found()} </p>\r\n      //     // }\r\n    \r\n\r\n    \r\n\r\n\r\n\r\n    return (\r\n        <div >\r\n            <QrReader\r\n                delay={delay}\r\n                onError={err => console.log(err)}\r\n                onScan={(data) => setResult(data)}\r\n                style={{ width: '100%', height: '200px' }}/>\r\n            <div styles={{display: 'flex'}}>\r\n                <p> {IsScann(result)} </p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ReactScannarA\r\n\r\n\r\n/**\r\n * \r\n * \r\n * \r\n * \r\n * \r\n    function IsScann () {\r\n      //result != T => On =>\r\n      const Found = () => {\r\n        return (\r\n        <div>\r\n          <Grid item={12}>\r\n            <div className={classes.rootBtn}>\r\n                <Grid item={4}>\r\n                    <Form > \r\n                        <Form.Group>\r\n                            <Form.Control type=\"number\" size=\"md\" placeholder=\"Values\" onChange={(e) => setValues(e.target.value)}/>\r\n                        </Form.Group>\r\n                    </Form>\r\n                </Grid>\r\n                <Grid item={4}>\r\n                    <Button  variant=\"contained\" color=\"Primary\" onClick={UpdatStore}> Withdraw </Button>\r\n                </Grid>\r\n            </div>\r\n          </Grid>\r\n        </div>\r\n      )}\r\n * \r\n * \r\n * const IsScann = () => {\r\n      const On = true\r\n      const Found = () => {\r\n        return (\r\n            <div>\r\n              <div>\r\n                {On? (<>{result}</>) : (<>B</>)}\r\n              </div>\r\n            </div>\r\n        )\r\n      }\r\n      if (result != null) {\r\n      return <> {Found()} </>\r\n      } else {\r\n      return <> {Found()} </>\r\n      }\r\n    }\r\n    \r\n///////////////////////////////////////////////////////////////\r\nconst IsScann = () => {\r\n      const On = true\r\n      const Found = () => {\r\n        return (\r\n            <div>\r\n              <div>\r\n                {result}\r\n              </div>\r\n            </div>\r\n        )\r\n      }\r\n      const NotFound = () => {\r\n        return (\r\n            <div>\r\n              <div>\r\n                Not Found PartCode!\r\n              </div>\r\n            </div>\r\n        )\r\n      }\r\n      if (result != null) {\r\n      return <> {Found()} </>\r\n      } else {\r\n      return <> {NotFound()} </>\r\n      }\r\n    }\r\n\r\n       // last values\r\n        return (\r\n            <div>\r\n              <p>\r\n                {pushResult}\r\n              </p>\r\n            </div>\r\n        )\r\n      }\r\n      const pushResult = []\r\n      if(result !== null) {\r\n        pushResult.push(result)\r\n      return <>{Found(pushResult)}</>\r\n      }\r\n\r\n */"]},"metadata":{},"sourceType":"module"}