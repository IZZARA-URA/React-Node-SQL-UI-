{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\754638\\\\Desktop\\\\QR_Code_Scanner\\\\qr-code\\\\src\\\\Component\\\\PageDashboard\\\\Search.js\",\n    _s = $RefreshSig$();\n\nimport Axios from 'axios';\nimport React, { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport TextField from '@material-ui/core/TextField';\nconst columns = [{\n  id: 'PartCode',\n  label: 'Part Code',\n  minWidth: 170\n}, {\n  id: 'Brand',\n  label: 'Brand',\n  minWidth: 100\n}, {\n  id: 'Description',\n  label: 'Description',\n  minWidth: 170,\n  align: 'right',\n  format: value => value.toLocaleString('en-US')\n}, {\n  id: 'Location_at',\n  label: 'Location',\n  minWidth: 150,\n  align: 'right',\n  format: value => value.toLocaleString('en-US')\n}, {\n  id: 'Status',\n  label: 'Status',\n  minWidth: 150,\n  align: 'right'\n}, {\n  id: 'Values_number',\n  label: 'Values',\n  minWidth: 120\n}];\nconst useStyles = makeStyles({\n  root: {\n    width: '100%'\n  },\n  container: {\n    maxHeight: 440\n  }\n});\n\nfunction Search() {\n  _s();\n\n  const [data, setData] = useState([]);\n  useEffect(() => {\n    fetch('http://localhost:3001/api/get').then(response => response.json()).then(json => setData(json));\n  }, []); //function search(rows){\n  //    return rows.filter((row) => row.PartCode.toLowerCase().indexOf(q) > -1)\n  //}\n\n  const classes = useStyles();\n  const [page, setPage] = useState(0);\n  const [rowsPerPage, setRowsPerPage] = useState(10);\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = event => {\n    setRowsPerPage(+event.target.value);\n    setPage(0);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Paper, {\n    className: classes.root,\n    children: [/*#__PURE__*/_jsxDEV(Form, {\n      children: /*#__PURE__*/_jsxDEV(Form.Group, {\n        children: /*#__PURE__*/_jsxDEV(Form.Control, {\n          type: \"text\",\n          size: \"md\",\n          placeholder: \"Part Code\",\n          onChange: e => setPartCode(e.target.value.toUpperCase())\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TableContainer, {\n      className: classes.container,\n      children: /*#__PURE__*/_jsxDEV(Table, {\n        stickyHeader: true,\n        \"aria-label\": \"sticky table\",\n        children: [/*#__PURE__*/_jsxDEV(TableHead, {\n          children: /*#__PURE__*/_jsxDEV(TableRow, {\n            children: columns.map(column => /*#__PURE__*/_jsxDEV(TableCell, {\n              align: column.align,\n              style: {\n                minWidth: column.minWidth\n              },\n              children: column.label\n            }, column.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 102,\n              columnNumber: 21\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n          children: data.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map(row => {\n            return /*#__PURE__*/_jsxDEV(TableRow, {\n              hover: true,\n              role: \"checkbox\",\n              tabIndex: -1,\n              children: columns.map(column => {\n                const value = row[column.id];\n                return /*#__PURE__*/_jsxDEV(TableCell, {\n                  align: column.align,\n                  children: column.format && typeof value === 'number' ? column.format(value) : value\n                }, column.id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 119,\n                  columnNumber: 25\n                }, this);\n              })\n            }, row.code, false, {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 21\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(TablePagination, {\n      rowsPerPageOptions: [10, 35, 100],\n      component: \"div\",\n      count: data.length,\n      rowsPerPage: rowsPerPage,\n      page: page,\n      onChangePage: handleChangePage,\n      onChangeRowsPerPage: handleChangeRowsPerPage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Search, \"AX1opAMdrAK6OFPvTQW7GHCMEQE=\", false, function () {\n  return [useStyles];\n});\n\n_c = Search;\nexport default Search;\n\nvar _c;\n\n$RefreshReg$(_c, \"Search\");","map":{"version":3,"sources":["C:/Users/754638/Desktop/QR_Code_Scanner/qr-code/src/Component/PageDashboard/Search.js"],"names":["Axios","React","useState","useEffect","makeStyles","Paper","Table","TableBody","TableCell","TableContainer","TableHead","TablePagination","TableRow","TextField","columns","id","label","minWidth","align","format","value","toLocaleString","useStyles","root","width","container","maxHeight","Search","data","setData","fetch","then","response","json","classes","page","setPage","rowsPerPage","setRowsPerPage","handleChangePage","event","newPage","handleChangeRowsPerPage","target","e","setPartCode","toUpperCase","map","column","slice","row","code","length"],"mappings":"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","sourcesContent":["import Axios from 'axios'\r\nimport React ,{ useState, useEffect }from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\n\r\n\r\n    const columns = [\r\n    { \r\n        id: 'PartCode', \r\n        label: 'Part Code', \r\n        minWidth: 170 \r\n    },\r\n    { \r\n        id: 'Brand', \r\n        label: 'Brand', \r\n        minWidth: 100 \r\n    },\r\n    {\r\n        id: 'Description',\r\n        label: 'Description',\r\n        minWidth: 170,\r\n        align: 'right',\r\n        format: (value) => value.toLocaleString('en-US'),\r\n    },\r\n    {\r\n        id: 'Location_at',\r\n        label: 'Location',\r\n        minWidth: 150,\r\n        align: 'right',\r\n        format: (value) => value.toLocaleString('en-US'),\r\n    },\r\n    {\r\n        id: 'Status',\r\n        label: 'Status',\r\n        minWidth: 150,\r\n        align: 'right',\r\n    },\r\n    { \r\n        id: 'Values_number', \r\n        label: 'Values', \r\n        minWidth: 120 \r\n    },\r\n    ];\r\n\r\n    const useStyles = makeStyles({\r\n    root: {\r\n      width: '100%',\r\n    },\r\n    container: {\r\n      maxHeight: 440,\r\n    },\r\n  });\r\n\r\n    function Search() {\r\n    const [data, setData] = useState([])\r\n\r\n    useEffect(() => {\r\n        fetch('http://localhost:3001/api/get')\r\n        .then((response) => response.json())\r\n        .then((json) => setData(json))\r\n    },[]);\r\n\r\n    //function search(rows){\r\n    //    return rows.filter((row) => row.PartCode.toLowerCase().indexOf(q) > -1)\r\n    //}\r\n\r\n    const classes = useStyles();\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(10);\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(+event.target.value);\r\n        setPage(0);\r\n    };\r\n\r\n    return (\r\n        <Paper className={classes.root}>\r\n            <Form>\r\n                <Form.Group >\r\n                    <Form.Control type=\"text\" size=\"md\" placeholder=\"Part Code\" onChange={(e) => setPartCode(e.target.value.toUpperCase())} />\r\n                </Form.Group>\r\n            </Form>\r\n        <TableContainer className={classes.container}>\r\n            <Table stickyHeader aria-label=\"sticky table\">\r\n            <TableHead>\r\n                <TableRow>\r\n                {columns.map((column) => (\r\n                    <TableCell\r\n                    key={column.id}\r\n                    align={column.align}\r\n                    style={{ minWidth: column.minWidth }}\r\n                    >\r\n                    {column.label}\r\n                    </TableCell>\r\n                ))}\r\n                </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n                {data.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row) => {\r\n                return (\r\n                    <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.code}>\r\n                    {columns.map((column) => {\r\n                        const value = row[column.id];\r\n                        return (\r\n                        <TableCell key={column.id} align={column.align}>\r\n                            {column.format && typeof value === 'number' ? column.format(value) : value}\r\n                        </TableCell>\r\n                        );\r\n                    })}\r\n                    </TableRow>\r\n                );\r\n                })}\r\n            </TableBody>\r\n            </Table>\r\n        </TableContainer>\r\n        <TablePagination\r\n            rowsPerPageOptions={[10, 35, 100]}\r\n            component=\"div\"\r\n            count={data.length}\r\n            rowsPerPage={rowsPerPage}\r\n            page={page}\r\n            onChangePage={handleChangePage}\r\n            onChangeRowsPerPage={handleChangeRowsPerPage}\r\n        />\r\n        </Paper>\r\n    );\r\n}\r\n\r\nexport default Search\r\n"]},"metadata":{},"sourceType":"module"}